!function(){"use strict";var r,n,e,t,o,A,a,i,s,l,c,d,p,u,g={426:function(r,n,e){var t=e(537),o=e.n(t),A=e(645),a=e.n(A)()(o());a.push([r.id,"@import url(https://fonts.googleapis.com/css2?family=Jost&display=swap);"]),a.push([r.id,':root.dark {\r\n    --border: 1px solid whitesmoke;\r\n    --bg: rgb(0, 0, 0);\r\n    --bg2: rgb(29, 29, 29);\r\n    --bg3: rgb(39, 39, 39);\r\n    --text: white;\r\n    --lightgray: #f0eef1;\r\n    --green: rgb(105, 247, 105);\r\n    --red: rgb(255, 118, 118);\r\n    --navy: rgb(21, 101, 192);\r\n    --blue: rgb(33, 150, 243);\r\n    --navyToBlue: linear-gradient(to right, var(--navy), var(--blue));\r\n    --shadow: 0px 2px 2px lightgray;\r\n    --gray: rgb(94, 94, 94);\r\n    --font: \'Jost\', sans-serif;\r\n}\r\n\r\n:root {\r\n    --border: 1px solid black;\r\n    --bg: rgb(255, 255, 255);\r\n    --bg2: rgb(250, 250, 250);\r\n    --bg3: rgb(245, 245, 245);\r\n    --text: black;\r\n    --lightgray: #f0eef1;\r\n    --green: rgb(105, 247, 105);\r\n    --red: rgb(255, 118, 118);\r\n    --navy: rgb(21, 101, 192);\r\n    --blue: rgb(33, 150, 243);\r\n    --navyToBlue: linear-gradient(to right, var(--navy), var(--blue));\r\n    --shadow: 0px 2px 2px lightgray;\r\n    --gray: rgb(94, 94, 94);\r\n    --font: \'Jost\', sans-serif;\r\n}\r\n\r\n*,\r\n*::before,\r\n*::after {\r\n    box-sizing: border-box;\r\n    padding: 0;\r\n    margin: 0;\r\n}\r\n\r\ninput, textarea, select, button, meter, progress{\r\n    margin: 0;\r\n    padding: 0;\r\n    border: none;\r\n    outline: none; /* Remove default focus outline */\r\n    box-sizing: border-box; /* Include padding and border in element\'s total width and height */\r\n    background-color: transparent; /* Reset background color */\r\n    font-family: inherit; /* Inherit font from parent */\r\n}\r\n  \r\n/* Reset button and submit input styles */\r\nbutton, input[type="submit"], input[type="button"] {\r\n    cursor: pointer;\r\n    background-color: transparent;\r\n}\r\n\r\n/* Reset checkbox and radio input styles */\r\ninput[type="checkbox"], input[type="radio"] {\r\n    vertical-align: middle; /* Align the input with label text */\r\n}\r\n\r\n/* Reset select element styles */\r\nselect {\r\n    appearance: none; /* Remove default dropdown arrow on Chrome */\r\n    background-image: none; /* Remove default background image */\r\n}\r\n\r\n/* Reset textarea styles */\r\ntextarea {\r\n    resize: vertical; /* Allow vertical resizing */\r\n}\r\n\r\n/* Make labels & forms & buttons & inputs block-level elements */\r\nlabel, form, button, input{\r\n    display: block;\r\n}\r\n\r\n\r\nbody {\r\n    font-family: var(--font);\r\n    background-color: var(--bg);\r\n    color: var(--text);\r\n    display: flex;\r\n    flex-direction: column;\r\n    min-height: 100vh;\r\n}\r\n\r\nheader {\r\n    font-size: 2rem;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    gap: 5px;\r\n    padding: 10px;\r\n    font-family: var(--font);\r\n    border-bottom: var(--border);\r\n    background-color: var(--bg2);\r\n}\r\n\r\n.header {\r\n    font-weight: 900;\r\n}\r\n\r\nheader img {\r\n    width: 50px;\r\n}\r\n\r\n.tt {\r\n    cursor: pointer;\r\n    font-size: 1.5rem;\r\n    position: absolute;\r\n    right: 20px;\r\n}\r\n\r\nmain {\r\n    flex: 1;\r\n    padding: 20px;\r\n    display: flex;\r\n    align-items: center ;\r\n    flex-direction: column;\r\n    font-size: 1.5rem;\r\n    gap: 25px;\r\n}\r\n\r\nmain > form {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    gap: 10px;\r\n}\r\n\r\nform > div{\r\n    display: flex;\r\n    gap: 10px;\r\n}\r\n\r\nform > div > button{\r\n    background-color: var(--bg3);\r\n    padding: 7px 20px;\r\n    border-radius: 8px;\r\n    border: var(--border);\r\n    color: var(--text);\r\n}\r\n\r\nmain input{\r\n    border: var(--border);\r\n    border-radius: 7px;\r\n    padding: 3px;\r\n}\r\n\r\n.cards{\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    gap: 20px;\r\n    justify-content: center;\r\n    font-size: 1.3rem\r\n}\r\n\r\n.card{\r\n    background-color: var(--bg3);\r\n    padding: 20px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    gap: 3px;\r\n}\r\n\r\nfooter {\r\n    border-top: var(--border);\r\n    text-align: center;\r\n    padding: 10px;\r\n    font-size: 1.2rem;\r\n    background-color: var(--bg2);\r\n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;IACI,8BAA8B;IAC9B,kBAAkB;IAClB,sBAAsB;IACtB,sBAAsB;IACtB,aAAa;IACb,oBAAoB;IACpB,2BAA2B;IAC3B,yBAAyB;IACzB,yBAAyB;IACzB,yBAAyB;IACzB,iEAAiE;IACjE,+BAA+B;IAC/B,uBAAuB;IACvB,0BAA0B;AAC9B;;AAEA;IACI,yBAAyB;IACzB,wBAAwB;IACxB,yBAAyB;IACzB,yBAAyB;IACzB,aAAa;IACb,oBAAoB;IACpB,2BAA2B;IAC3B,yBAAyB;IACzB,yBAAyB;IACzB,yBAAyB;IACzB,iEAAiE;IACjE,+BAA+B;IAC/B,uBAAuB;IACvB,0BAA0B;AAC9B;;AAEA;;;IAGI,sBAAsB;IACtB,UAAU;IACV,SAAS;AACb;;AAEA;IACI,SAAS;IACT,UAAU;IACV,YAAY;IACZ,aAAa,EAAE,iCAAiC;IAChD,sBAAsB,EAAE,mEAAmE;IAC3F,6BAA6B,EAAE,2BAA2B;IAC1D,oBAAoB,EAAE,6BAA6B;AACvD;;AAEA,yCAAyC;AACzC;IACI,eAAe;IACf,6BAA6B;AACjC;;AAEA,0CAA0C;AAC1C;IACI,sBAAsB,EAAE,oCAAoC;AAChE;;AAEA,gCAAgC;AAChC;IACI,gBAAgB,EAAE,4CAA4C;IAC9D,sBAAsB,EAAE,oCAAoC;AAChE;;AAEA,0BAA0B;AAC1B;IACI,gBAAgB,EAAE,4BAA4B;AAClD;;AAEA,gEAAgE;AAChE;IACI,cAAc;AAClB;;;AAGA;IACI,wBAAwB;IACxB,2BAA2B;IAC3B,kBAAkB;IAClB,aAAa;IACb,sBAAsB;IACtB,iBAAiB;AACrB;;AAEA;IACI,eAAe;IACf,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,QAAQ;IACR,aAAa;IACb,wBAAwB;IACxB,4BAA4B;IAC5B,4BAA4B;AAChC;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,eAAe;IACf,iBAAiB;IACjB,kBAAkB;IAClB,WAAW;AACf;;AAEA;IACI,OAAO;IACP,aAAa;IACb,aAAa;IACb,oBAAoB;IACpB,sBAAsB;IACtB,iBAAiB;IACjB,SAAS;AACb;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,aAAa;IACb,SAAS;AACb;;AAEA;IACI,4BAA4B;IAC5B,iBAAiB;IACjB,kBAAkB;IAClB,qBAAqB;IACrB,kBAAkB;AACtB;;AAEA;IACI,qBAAqB;IACrB,kBAAkB;IAClB,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,eAAe;IACf,SAAS;IACT,uBAAuB;IACvB;AACJ;;AAEA;IACI,4BAA4B;IAC5B,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,QAAQ;AACZ;;AAEA;IACI,yBAAyB;IACzB,kBAAkB;IAClB,aAAa;IACb,iBAAiB;IACjB,4BAA4B;AAChC",sourcesContent:['@import url(\'https://fonts.googleapis.com/css2?family=Jost&display=swap\');\r\n\r\n:root.dark {\r\n    --border: 1px solid whitesmoke;\r\n    --bg: rgb(0, 0, 0);\r\n    --bg2: rgb(29, 29, 29);\r\n    --bg3: rgb(39, 39, 39);\r\n    --text: white;\r\n    --lightgray: #f0eef1;\r\n    --green: rgb(105, 247, 105);\r\n    --red: rgb(255, 118, 118);\r\n    --navy: rgb(21, 101, 192);\r\n    --blue: rgb(33, 150, 243);\r\n    --navyToBlue: linear-gradient(to right, var(--navy), var(--blue));\r\n    --shadow: 0px 2px 2px lightgray;\r\n    --gray: rgb(94, 94, 94);\r\n    --font: \'Jost\', sans-serif;\r\n}\r\n\r\n:root {\r\n    --border: 1px solid black;\r\n    --bg: rgb(255, 255, 255);\r\n    --bg2: rgb(250, 250, 250);\r\n    --bg3: rgb(245, 245, 245);\r\n    --text: black;\r\n    --lightgray: #f0eef1;\r\n    --green: rgb(105, 247, 105);\r\n    --red: rgb(255, 118, 118);\r\n    --navy: rgb(21, 101, 192);\r\n    --blue: rgb(33, 150, 243);\r\n    --navyToBlue: linear-gradient(to right, var(--navy), var(--blue));\r\n    --shadow: 0px 2px 2px lightgray;\r\n    --gray: rgb(94, 94, 94);\r\n    --font: \'Jost\', sans-serif;\r\n}\r\n\r\n*,\r\n*::before,\r\n*::after {\r\n    box-sizing: border-box;\r\n    padding: 0;\r\n    margin: 0;\r\n}\r\n\r\ninput, textarea, select, button, meter, progress{\r\n    margin: 0;\r\n    padding: 0;\r\n    border: none;\r\n    outline: none; /* Remove default focus outline */\r\n    box-sizing: border-box; /* Include padding and border in element\'s total width and height */\r\n    background-color: transparent; /* Reset background color */\r\n    font-family: inherit; /* Inherit font from parent */\r\n}\r\n  \r\n/* Reset button and submit input styles */\r\nbutton, input[type="submit"], input[type="button"] {\r\n    cursor: pointer;\r\n    background-color: transparent;\r\n}\r\n\r\n/* Reset checkbox and radio input styles */\r\ninput[type="checkbox"], input[type="radio"] {\r\n    vertical-align: middle; /* Align the input with label text */\r\n}\r\n\r\n/* Reset select element styles */\r\nselect {\r\n    appearance: none; /* Remove default dropdown arrow on Chrome */\r\n    background-image: none; /* Remove default background image */\r\n}\r\n\r\n/* Reset textarea styles */\r\ntextarea {\r\n    resize: vertical; /* Allow vertical resizing */\r\n}\r\n\r\n/* Make labels & forms & buttons & inputs block-level elements */\r\nlabel, form, button, input{\r\n    display: block;\r\n}\r\n\r\n\r\nbody {\r\n    font-family: var(--font);\r\n    background-color: var(--bg);\r\n    color: var(--text);\r\n    display: flex;\r\n    flex-direction: column;\r\n    min-height: 100vh;\r\n}\r\n\r\nheader {\r\n    font-size: 2rem;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    gap: 5px;\r\n    padding: 10px;\r\n    font-family: var(--font);\r\n    border-bottom: var(--border);\r\n    background-color: var(--bg2);\r\n}\r\n\r\n.header {\r\n    font-weight: 900;\r\n}\r\n\r\nheader img {\r\n    width: 50px;\r\n}\r\n\r\n.tt {\r\n    cursor: pointer;\r\n    font-size: 1.5rem;\r\n    position: absolute;\r\n    right: 20px;\r\n}\r\n\r\nmain {\r\n    flex: 1;\r\n    padding: 20px;\r\n    display: flex;\r\n    align-items: center ;\r\n    flex-direction: column;\r\n    font-size: 1.5rem;\r\n    gap: 25px;\r\n}\r\n\r\nmain > form {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    gap: 10px;\r\n}\r\n\r\nform > div{\r\n    display: flex;\r\n    gap: 10px;\r\n}\r\n\r\nform > div > button{\r\n    background-color: var(--bg3);\r\n    padding: 7px 20px;\r\n    border-radius: 8px;\r\n    border: var(--border);\r\n    color: var(--text);\r\n}\r\n\r\nmain input{\r\n    border: var(--border);\r\n    border-radius: 7px;\r\n    padding: 3px;\r\n}\r\n\r\n.cards{\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    gap: 20px;\r\n    justify-content: center;\r\n    font-size: 1.3rem\r\n}\r\n\r\n.card{\r\n    background-color: var(--bg3);\r\n    padding: 20px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    gap: 3px;\r\n}\r\n\r\nfooter {\r\n    border-top: var(--border);\r\n    text-align: center;\r\n    padding: 10px;\r\n    font-size: 1.2rem;\r\n    background-color: var(--bg2);\r\n}'],sourceRoot:""}]),n.Z=a},645:function(r){r.exports=function(r){var n=[];return n.toString=function(){return this.map((function(n){var e="",t=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),t&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=r(n),t&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(r,e,t,o,A){"string"==typeof r&&(r=[[null,r,void 0]]);var a={};if(t)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(a[s]=!0)}for(var l=0;l<r.length;l++){var c=[].concat(r[l]);t&&a[c[0]]||(void 0!==A&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=A),e&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=e):c[2]=e),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),n.push(c))}},n}},537:function(r){r.exports=function(r){var n=r[1],e=r[3];if(!e)return n;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),A="/*# ".concat(o," */");return[n].concat([A]).join("\n")}return[n].join("\n")}},379:function(r){var n=[];function e(r){for(var e=-1,t=0;t<n.length;t++)if(n[t].identifier===r){e=t;break}return e}function t(r,t){for(var A={},a=[],i=0;i<r.length;i++){var s=r[i],l=t.base?s[0]+t.base:s[0],c=A[l]||0,d="".concat(l," ").concat(c);A[l]=c+1;var p=e(d),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)n[p].references++,n[p].updater(u);else{var g=o(u,t);t.byIndex=i,n.splice(i,0,{identifier:d,updater:g,references:1})}a.push(d)}return a}function o(r,n){var e=n.domAPI(n);return e.update(r),function(n){if(n){if(n.css===r.css&&n.media===r.media&&n.sourceMap===r.sourceMap&&n.supports===r.supports&&n.layer===r.layer)return;e.update(r=n)}else e.remove()}}r.exports=function(r,o){var A=t(r=r||[],o=o||{});return function(r){r=r||[];for(var a=0;a<A.length;a++){var i=e(A[a]);n[i].references--}for(var s=t(r,o),l=0;l<A.length;l++){var c=e(A[l]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}A=s}}},569:function(r){var n={};r.exports=function(r,e){var t=function(r){if(void 0===n[r]){var e=document.querySelector(r);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(r){e=null}n[r]=e}return n[r]}(r);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(e)}},216:function(r){r.exports=function(r){var n=document.createElement("style");return r.setAttributes(n,r.attributes),r.insert(n,r.options),n}},565:function(r,n,e){r.exports=function(r){var n=e.nc;n&&r.setAttribute("nonce",n)}},795:function(r){r.exports=function(r){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=r.insertStyleElement(r);return{update:function(e){!function(r,n,e){var t="";e.supports&&(t+="@supports (".concat(e.supports,") {")),e.media&&(t+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(t+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),t+=e.css,o&&(t+="}"),e.media&&(t+="}"),e.supports&&(t+="}");var A=e.sourceMap;A&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(A))))," */")),n.styleTagTransform(t,r,n.options)}(n,r,e)},remove:function(){!function(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r)}(n)}}}},589:function(r){r.exports=function(r,n){if(n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}}},b={};function f(r){var n=b[r];if(void 0!==n)return n.exports;var e=b[r]={id:r,exports:{}};return g[r](e,e.exports,f),e.exports}f.n=function(r){var n=r&&r.__esModule?function(){return r.default}:function(){return r};return f.d(n,{a:n}),n},f.d=function(r,n){for(var e in n)f.o(n,e)&&!f.o(r,e)&&Object.defineProperty(r,e,{enumerable:!0,get:n[e]})},f.o=function(r,n){return Object.prototype.hasOwnProperty.call(r,n)},f.nc=void 0,r=f(379),n=f.n(r),e=f(795),t=f.n(e),o=f(569),A=f.n(o),a=f(565),i=f.n(a),s=f(216),l=f.n(s),c=f(589),d=f.n(c),p=f(426),(u={}).styleTagTransform=d(),u.setAttributes=i(),u.insert=A().bind(null,"head"),u.domAPI=t(),u.insertStyleElement=l(),n()(p.Z,u),p.Z&&p.Z.locals&&p.Z.locals,document.querySelector(".tt").addEventListener("click",(function(){const r=document.documentElement,n=r.querySelector(".tt");"dark"===r.className?r.removeAttribute("class"):r.className="dark","☀️"==n.textContent?n.textContent="🌙":n.textContent="☀️"})),new Promise((async(r,n)=>{fetch("https://api.weatherapi.com/v1/forecast.json?key=296f7866e4874f4a967204528230209&q=serdivan&days=5&aqi=no&alerts=no").then((r=>r.json())).then((n=>r(n))).catch((r=>n(r)))})).then((r=>{console.log(r)}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,